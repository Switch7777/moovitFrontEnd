export default NRMAModularAgentWrapper;
declare class NRMAModularAgentWrapper {
    static isAgentStarted: boolean;
    didCheck: boolean;
    hasMethod(name: any): boolean;
    execute(...args: any[]): any;
    analyticsEventEnabled: (enabled: any) => void;
    networkRequestEnabled: (enabled: any) => void;
    networkErrorRequestEnabled: (enabled: any) => void;
    httpResponseBodyCaptureEnabled: (enabled: any) => void;
    recordBreadcrumb: (eventName: any, attributes: any) => void;
    recordCustomEvent: (eventType: any, eventName?: string, attributes?: {}) => void;
    logAttributes: (attributes?: {}) => void;
    crashNow: (message: any) => void;
    currentSessionId: () => Promise<any>;
    noticeNetworkFailure: (url: any, httpMethod: any, startTime: any, endTime: any, failure: any) => void;
    recordMetric: (name: any, category: any, value: any, countUnit: any, valueUnit: any) => void;
    removeAllAttributes: () => void;
    setMaxEventBufferTime: (maxBufferTimeInSeconds: any) => void;
    setMaxEventPoolSize: (maxSize: any) => void;
    setMaxOfflineStorageSize: (megaBytes: any) => void;
    setAttribute: (attributeName: any, value: any) => void;
    removeAttribute: (attributeName: any) => void;
    incrementAttribute: (attributeName: any, value: any) => void;
    setJSAppVersion: (version: any) => void;
    addHTTPHeadersTrackingFor: (headers: any) => void;
    setUserId: (userId: any) => void;
    recordStack: (name: any, message: any, stack: any, isFatal: any, JSAppVersion: any) => void;
    noticeHttpTransaction: (url: any, method: any, status: any, startTime: any, endTime: any, bytesSent: any, bytesReceived: any, response: any) => void;
    consoleEvents: (message: any) => void;
    startAgent: (appKey: any, agentVersion: any, reactNativeVersion: any, config: any) => void;
    startInteraction: (actionName: any) => Promise<any>;
    endInteraction: (actionName: any) => void;
    setInteractionName: (name: any) => void;
    shutdown: () => void;
    recordHandledException: (error: any, JSAppVersion: any, isFatal: any) => Promise<void>;
}
//# sourceMappingURL=nrma-modular-agent-wrapper.d.ts.map